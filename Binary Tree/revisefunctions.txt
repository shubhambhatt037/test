// Sum Tree

pair<bool, int> isSumTreeFast(Node* root)
{
    if(!root)
    {
        pair<bool, int> p = make_pair(true, 0);
        return p;
    }

    if(!root->left && !root->right)
    {
        pair<bool, int> p = make_pair(true, root->data);
        return p;
    }

    pair<bool, int> left = isSumTreeFast(root->left);
    pair<bool, int> right = isSumTreeFast(root->right);

    bool leftAns = left.first;
    bool rightAns = right.first;
    bool sum = left.second + right.second == root->data;

    pair<bool, int> ans;
    if(leftAns && rightAns && sum)
    {
        ans.first = true;
        ans.second = 2*root->data;
    }
    else
        ans.first = false;
    
    return ans;
}

// vertical order traversal

vector<int> verticalOrder(node* root)
{
    map<int, pair<int, pair<int, vector<int>>>> nodes;
    queue<pair<node*, pair<int, int> q;
    vector<int> ans;

    if(!root)
        return ans;

    q.push(make_pair(root, make_pair(0,0)));
    while(!q.empty())
    {
        pair<node*, pair<int, int>> temp = q.front();
        q.pop();

        int hd = temp.second.first;
        int lvl = temp.second.second;

        nodes[hd][lvl].push_back(temp->data);
        node* frontnode = temp.first;

        if(frontnode->left)
            q.push(make_pair(frontnode->left, make_pair(hd-1, lvl+1)));
        if(frontnode->right)
            q.push(make_pair(frontnode->right, make_pair(hd+1, lvl+1)));

    }
    for(auto i : nodes)
        for(auto j : i.second)
            for(auto k : j.second)
                ans.push_back(k);
    
    return ans;
}