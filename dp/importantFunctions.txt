// Min Cost Climbing Stairs

class Solution {
public:
    int solve(vector<int>& cost, vector<int> &dp, int n)
    {
        // memorization
        if(n == 0 || n == 1)
            return cost[n];
        
        if(dp[n] != -1)
            return dp[n];
        
        dp[n] = cost[n] + min(solve(cost, dp, n-1), solve(cost, dp, n-2));
        return dp[n];
    }
    int solve1(vector<int>& cost)
    {
        // tabulation bottom up approach
        int n = cost.size();
        vector<int> dp(n+1);
        dp[0] = cost[0];
        dp[1] = cost[1];

        for(int i=2; i<n; i++)
        {
            dp[i] = cost[i]+min(dp[i-1], dp[i-2]);
        }
        return min(dp[n-1], dp[n-2]);
    }
    int minCostClimbingStairs(vector<int>& cost) {
        vector<int> dp(cost.size()+1, -1);
        //return min(solve(cost, dp, cost.size()-1), solve(cost, dp, cost.size()-2));
        return solve1(cost);
    }
};

// Minimum number of coins

#include <bits/stdc++.h> 
int solve(vector<int> &num, int x, vector<int> &dp)
{
    if(x == 0)
        return 0;
    
    if(x < 0)
        return INT_MAX;
    
    if(dp[x] != -1)
        return dp[x];
    
    int mini = INT_MAX;
    for(auto i: num)
    {
        int ans = solve(num, x-i, dp);
        if(ans != INT_MAX)
            mini = min(mini, 1+ans);
    }

    return dp[x] = mini;
}
int minimumElements(vector<int> &num, int x)
{
    // Using memorization
    // vector<int> dp(x+1, -1);
    // int ans = solve(num, x, dp);
    
    // if(ans == INT_MAX)
    //     return -1;
    
    // return ans;

    // Using Tabulation
    vector<int> dp(x+1, INT_MAX);
    dp[0] = 0;

    for(int i=1; i<=x; i++)
    {
        for(int j=0; j<num.size(); j++)
        {
            if(i-num[j]>=0 && dp[i-num[j]]!= INT_MAX)
                dp[i] = min(dp[i], dp[i-num[j]]+1);  // +1 for current element
        }
    }

    if(dp[x] == INT_MAX)
        return -1;
    
    return dp[x];
}

// Maximum sum of non-adjacent elements

#include <bits/stdc++.h> 
int solve(vector<int>& nums, int n, vector<int>& dp)
{
    if(n == 0)
        return nums[0];

    if(n < 0)
        return 0;

    if(dp[n] != -1)
        return dp[n];
    
    int inc = solve(nums, n-2, dp) + nums[n];
    int exc = solve(nums, n-1, dp);
    
    dp[n] = max(inc, exc);
    return dp[n];
}
int maximumNonAdjacentSum(vector<int> &nums){
    // vector<int> dp(nums.size(), -1);
    // return solve(nums, nums.size()-1, dp);

    int n = nums.size();
    vector<int> dp(n, 0);
    dp[0] = nums[0];

    for(int i=1; i<n; i++)
    {
        int inc = dp[i-2]+nums[i];
        int exc = dp[i-1];

        dp[i] = max(inc, exc);
    }
    return dp[n-1];
}

// Count derangements  ****

#define mod 1000000007
#include<vector>

long long int solve(int n, vector<long long int>& dp)
{
    if(n == 1)
        return 0;
    
    if(n == 2)
        return 1;
    
    if(dp[n] != -1)
        return dp[n];
    
    dp[n] = ((n-1)%mod*(solve(n-1, dp)%mod+solve(n-2 ,dp)%mod))%mod;
    return dp[n];
}

long long int countDerangements(int n) {

    vector<long long int> dp(n+1, -1);
    //return solve(n, dp);


    // using tabulation
    // dp[1] = 0;
    // dp[2] = 1;

    // for(int i=3; i<n+1; i++)
    // {
    //     dp[i] = ((i-1)%mod*(dp[i-1]%mod + dp[i-2]%mod)%mod)%mod;
    // }

    // return dp[n];

    // space optimisation

    long long int prev = 0;
    long long int next = 1;

    for(int i=3; i<n+1; i++)
    {
        long long int ans = ((i-1)%mod*(next%mod + prev%mod)%mod)%mod;
        prev = next;
        next = ans;
    }

    return next;
}

// Painting fence algorithm

#include <bits/stdc++.h>

#define mod 10000000009

int add(int a, int b)
{
    return ((a%mod)+(b%mod))%mod;
}

int mult(int a, int b)
{
    return ((a%mod) * 1LL *(b%mod))%mod;
}

int solve(int n, int k, vector<int> &dp)
{
    if(n == 1)
        return k;
    
    if(n == 2)  
        return add(k, mult(k, k-1));

    if(dp[n] != -1)
        return dp[n];
    
    dp[n] = add(mult(solve(n-2,k,dp),(k-1)), mult(solve(n-1,k,dp),(k-1)));
    return dp[n];
}

int numberOfWays(int n, int k) {
    vector<int> dp(n+1, -1);
    return solve(n, k, dp);
}
