Reverse a queue

queue<int> rev(queue<int> q)
{
    stack<int> s;
    while(!q.empty())
    {
        int element = q.front();
        q.pop();
        s.push(element);
    }
    
    while(!s.empty())
    {
        int element = s.top();
        s.pop();
        q.push(element);
    }
    return q;
}

First negative integer

vector<long long> printFirstNegativeInteger(long long int A[],
                                            long long int N, long long int K) {
    
    deque<long long int> dq;
    vector<long long> ans;
    
    for(int i = 0 ; i < K ; i++)
    {
        if(A[i] < 0)
            dq.push_back(i);
    }
    
    if(!dq.empty())
        ans.push_back(A[dq.front()]);
    else
        ans.push_back(0);
        
    for(int i = K; i < N; i++)
    {
        if(!dq.empty() && (i - dq.front()) >= K)
            dq.pop_front();
        
        if(A[i] < 0)
            dq.push_back(i);
            
        if(!dq.empty())
            ans.push_back(A[dq.front()]);
        else
            ans.push_back(0);
    }
    return ans;
 }

 Reverse first k elements of queue

 queue<int> modifyQueue(queue<int> q, int k) {
    
    stack<int> s;
    for(int i =0; i < k; i++)
    {
        int ele = q.front();
        s.push(ele);
        q.pop();
    }
    
    while(!s.empty())
    {
        int ele = s.top();
        s.pop();
        q.push(ele);
    }
    
    int t = q.size() - k;
    while(t--)
    {
        int ele = q.front();
        q.pop();
        q.push(ele);
    }
    return q;
}

First non repeating character in a string

class Solution {
	public:
		string FirstNonRepeating(string A){
		    
		    unordered_map<char,int> count;
		    queue<int> q;
		    string ans = "";
		    
		    for(int i = 0; i < A.length(); i++)
		    {
		        char ch = A[i];
		        
		        count[ch]++;
		        
		        q.push(ch);
		        
		        while(!q.empty())
		        {
		            if(count[q.front()] > 1)
		                q.pop();
		            else{
		                ans.push_back(q.front());
		                break;
		            }
		        }
		        if(q.empty())
		            ans.push_back('#');
		    }
		    return ans;
		}

};

Circular tour

class Solution{
  public:
  
    int tour(petrolPump p[],int n)
    {
        int balance = 0;
        int deficit = 0;
        int start = 0;
       
        for(int i = 0; i < n; i++)
        {
            balance += p[i].petrol - p[i].distance;
            if(balance < 0)
            {
                deficit += balance;
                start = i+1;
                balance = 0;
            }
        }
        if(deficit + balance >= 0)
            return start;
        else
            return -1;
    }
};