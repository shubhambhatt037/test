// kth smallest element

class Solution{
    public:
    // arr : given array
    // l : starting index of the array i.e 0
    // r : ending index of the array i.e size-1
    // k : find kth smallest element and return using this function
    int kthSmallest(int arr[], int l, int r, int k) {
        
        priority_queue<int> pq;
        for(int i=l; i<k; i++)
            pq.push(arr[i]);
        
        for(int i=k; i<=r; i++)
        {
            if(arr[i] < pq.top())
            {
                pq.pop();
                pq.push(arr[i]);
            }
        }
        
        return pq.top();
    }
};

// Is binary tree heap

class Solution {
  public:
    int countNodes(struct Node* root)
    {
        if(!root)
            return 0;
        else
            return (1+countNodes(root->left) + countNodes(root->right));
    }
    bool isCBT(struct Node* root, int i, int count)
    {
        if(!root)
            return true;
            
        if(i >= count)
            return false;
            
        else
        {
            return (isCBT(root->left, 2*i+1, count) && isCBT(root->right, 2*i+2, count));
        }
    }
    bool checkMaxHeap(struct Node* root)
    {
        if(!root->left && !root->right)
            return true;
        else if(!root->right)
        {
            if(root->left->data > root->data)
                return false;
            else
                return true;
        }
        else if(!root->left)
        {
            if(root->right->data > root->data)
                return false;
            else
                return true;
        }else
        {
            if((root->right->data < root->data) && (root->left->data < root->data)
             && (checkMaxHeap(root->left)) && (checkMaxHeap(root->right)))
                return true;
            else
                return false;
        }
    }
    bool isHeap(struct Node* tree) {
        int count = countNodes(tree);
        if(isCBT(tree, 0, count) && checkMaxHeap(tree))
            return true;
        else 
            return false;
    }
};

// Merge two binary max heaps

class Solution{
    public:
    void heapify(vector<int> &arr, int n, int i)
    {
        int largest = i;
        int left = 2*i + 1;
        int right = 2*i + 2;
    
        if(left < n && arr[largest] < arr[left])
            largest = left;
    
        if(right < n && arr[largest] < arr[right])
            largest = right;
    
        if(largest != i)
        {
            swap(arr[i], arr[largest]);
            heapify(arr, n, largest);
        }
    }
    vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
        vector<int> ans;
        
        for(auto i:a)
            ans.push_back(i);
            
        for(auto i:b)
            ans.push_back(i);
            
        int x= ans.size();
        for(int i =x/2 - 1; i>=0; i--)
            heapify(ans, x, i);
        
        return ans;
    }
};

// Function to return the minimum cost of connecting the ropes.

long long minCost(long long arr[], long long n) {
    priority_queue<long long, vector<long long>, greater<long long>> pq;
    
    for(int i=0; i<n; i++)
        pq.push(arr[i]);
        
    long long cost = 0;
    while(pq.size() > 1)
    {
        long long a = pq.top();
        pq.pop();
        long long b = pq.top();
        pq.pop();
        
        long long sum = a+b;
        cost += sum;
        
        pq.push(sum);
    }
    return cost;
}

// Convert BST to minheap

void inorderTraverse(BinaryTreeNode* root, vector<int> &inorder)
{
	if(!root)
		return;
	
	inorderTraverse(root->left, inorder);
	inorder.push_back(root->data);
	inorderTraverse(root->right, inorder);
}
void preorderTraverse(BinaryTreeNode* &root, vector<int> inorder, int &i)
{
	if(!root)
		return;
	
	root->data = inorder[i++];
	preorderTraverse(root->left, inorder, i);
	preorderTraverse(root->right, inorder, i);
}
BinaryTreeNode* convertBST(BinaryTreeNode* root)
{
	vector<int> inorder;
	int i=0;
	inorderTraverse(root, inorder);
	preorderTraverse(root, inorder, i);
	return root;
}

// k-th largest sum subarray

#include<queue>
int getKthLargest(vector<int> &arr, int k)
{
	priority_queue<int, vector<int>, greater<int>> mini;
	int n = arr.size();

	for(int i=0; i<n; i++)
	{
		int sum =0;
		for(int j=i; j<n; j++)
		{
			sum += arr[j];
			if(mini.size() < k)
				mini.push(sum);
			else
			{
				if(mini.top() < sum)
				{
					mini.pop();
					mini.push(sum);
				}
			}
		}
	}
	return mini.top();
}

Merge k sorted arrays

class node
{
    public:
    int data;
    int i;
    int j;
    node(int data, int row, int col)
    {
        this->data = data;
        i = row;
        j = col;
    }
};
class compare
{
    public:
      bool operator()(node *a, node *b) { 
        return a->data > b->data; 
    }
};
vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
{
    priority_queue<node*, vector<node*>, compare> mini;

    for(int i=0; i<k; i++)
    {
        node* temp = new node(kArrays[i][0], i, 0);
        mini.push(temp);
    }

    vector<int> ans;

    while(mini.size() > 0)
    {
        node* temp = mini.top();
        ans.push_back(temp->data);
        mini.pop();

        int i= temp->i;
        int j= temp->j;

        if(j+1 < kArrays[i].size()){
            node* next = new node(kArrays[i][j+1], i, j+1);
            mini.push(next);
        }
    }
    return ans;
}

// Merge k sorted lists

class compare
{
    public:
      bool operator()(Node<int> *a, Node<int> *b) { 
        return a->data > b->data; 
    }
};
Node<int>* mergeKLists(vector<Node<int>*> &listArray)
{
    priority_queue<Node<int>*, vector<Node<int>*>, compare> minheap;
    int k= listArray.size();

    if(k==0)
        return NULL;

    for (int i = 0; i < k; i++) {
      if (listArray[i] != NULL)
        minheap.push(listArray[i]);
    }

    Node<int>* head = NULL;
    Node<int>* tail = NULL;

    while(minheap.size() >0)
    {
        Node<int>* top = minheap.top();
        minheap.pop();

        if(top->next != NULL)
            minheap.push(top->next);
        
        if(!head)
            head = tail = top;
        else{
            tail->next = top;
            tail = top;
        }
    }
    return head;
}

class Node
{
    public:
    int data;
    int row;
    int col;
    Node(int d, int r, int c)
    {
        data = d;
        row = r;
        col = c;
    }
};

class compare{
    public:
      bool operator()(Node *a, Node *b) { 
        return a->data > b->data; 
    }
};

// Smallest Range from k sorted list

int kSorted(vector<vector<int>> &a, int k, int n) 
{
    int maxi = INT_MIN, mini = INT_MAX;
    priority_queue<Node*, vector<Node*>, compare> minheap;

    for(int i=0; i<k; i++)
    {
        maxi = max(maxi, a[i][0]);
        mini = min(mini, a[i][0]);
        minheap.push(new Node(a[i][0], i, 0));
    }

    int start = mini, end = maxi;

    while(!minheap.empty())
    {
        Node* top = minheap.top();
        minheap.pop();
        mini = top->data;

        if(maxi - mini < end - start)
        {
            end = maxi;
            start = mini;
        }

        int i = top->row;
        int j = top->col;

        if (j + 1 < n) {
            maxi = max(maxi, a[i][j + 1]);
            minheap.push(new Node(a[i][j + 1], i, j + 1));
        }else
            break;
    }
    
    return end-start+1;
}

// Median in a stream

int signum(int a, int b)
{
	if(a>b)
		return 1;

	else if(a==b)
		return 0;

	else
		return -1;
}
void cal_median(int element, priority_queue<int> &maxi,
	priority_queue<int, vector<int>, greater<int>> 
	&mini, int &M)
{
	switch(signum(maxi.size(), mini.size()))
	{
		case 0:
			if(element > M)
			{
				mini.push(element);
				M = mini.top();
			}
			else
			{
				maxi.push(element);
				M = maxi.top();
			}
			break;

		case 1:
			if(element > M)
			{
				mini.push(element);
				M = (mini.top()+maxi.top())/2;
			}
			else
			{
				mini.push(maxi.top());
				maxi.pop();
				maxi.push(element);
				M = (mini.top()+maxi.top())/2;
			}
			break;

		case -1:
			if(element > M)
			{
				maxi.push(mini.top());
				mini.pop();
				mini.push(element);
				M = (mini.top()+maxi.top())/2;
			}
			else
			{
				maxi.push(element);
				M = (mini.top()+maxi.top())/2;
			}
			break;

	}
}
vector<int> findMedian(vector<int> &arr, int n){
	
	priority_queue<int> maxheap;
	priority_queue<int, vector<int>, greater<int>> minheap;
	vector<int> ans;
	int median = -1;

	for(int i=0; i<n; i++)
	{
		cal_median(arr[i], maxheap, minheap, median);
		ans.push_back(median);
	}
	return ans;
}
