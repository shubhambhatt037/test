// Search in BST
bool searchInBST(BinaryTreeNode<int> *root, int x) {
    
    if(!root)
        return 0;

    if(root->data == x)
        return 1;
    else if(root->data > x)
        return searchInBST(root->left, x);
    else
        return searchInBST(root->right, x);

}

// isBST
bool isBST(BinaryTreeNode<int> *root, int min, int max)
{
    if(!root)
        return true;
    
    if(root->data >= min && root->data <= max)
    {
        bool left = isBST(root->left, min, root->data);
        bool right = isBST(root->right, root->data, max);
        return left && right;
    }
    else
        return false;
}
bool validateBST(BinaryTreeNode<int> *root) {
    return isBST(root, INT_MIN, INT_MAX);
}

// kth smallest element in BST
int solve(BinaryTreeNode<int>* root, int &i, int k)
{
    if(!root)
        return -1;
    
    int left = solve(root->left, i, k);

    if(left != -1)
        return left;
        
    i++;
    if(i == k)
        return root->data;
    
    return solve(root->right, i, k);
}
int kthSmallest(BinaryTreeNode<int>* root, int k) {
    int i = 0;
    return solve(root, i, k);
}

// Predecessor and successor of an element
pair<int,int> predecessorSuccessor(BinaryTreeNode<int>* root, int key)
{
    BinaryTreeNode<int>* temp = root;
    int pred = -1;
    int succ = -1;

    while(temp->data != key)
    {
        if(temp->data > key)
        {
            succ = temp->data;
            temp = temp->left;
        }
        else 
        {
            pred = temp->data;
            temp = temp->right;
        }
    }

    BinaryTreeNode<int>* left = temp->left;
    while(left)
    {
        pred = left->data;
        left = left->right;
    }
    BinaryTreeNode<int>* right = temp->right;
    while(right)
    {
        succ = right->data;
        right = right->left;
    }
    
    //pair<int, int> ans = make_pair(pred, succ);
    return {pred, succ};
}

// LCA in BST
TreeNode<int>* LCAinaBST(TreeNode<int>* root, TreeNode<int>* P, TreeNode<int>* Q)
{
    if(!root)
        return NULL;
        
    if(root->data > P->data && root->data >Q->data)
        return LCAinaBST(root->left, P, Q);
    else if(root->data < P->data && root->data < Q->data)
        return LCAinaBST(root->right, P, Q);
    
    return root;
}

// sum of two nodes equal to a target in BST
void inorderTraversal(BinaryTreeNode<int>* root, vector<int> &inorder)
{
    if(!root)
        return;
    
   inorderTraversal(root->left, inorder);
   inorder.push_back(root->data);
   inorderTraversal(root->right, inorder);
}

bool twoSumInBST(BinaryTreeNode<int>* root, int target) {
    vector<int> inorder;
    inorderTraversal(root, inorder);
    int i=0;
    int e= inorder.size()-1;
    while(i<e)
    {
        if(target < inorder[i]+inorder[e])
            e--;
        else if(target > inorder[i]+inorder[e])
            i++;
        else
            return true;
    }
    return false;
}

// Flatten a BST
void inorderTraversal(TreeNode<int>* root, vector<int> &inorder)
{
    if(!root)
        return;
    
   inorderTraversal(root->left, inorder);
   inorder.push_back(root->data);
   inorderTraversal(root->right, inorder);
}

TreeNode<int>* flatten(TreeNode<int>* root)
{
    vector<int> inorder;
    inorderTraversal(root, inorder);
    TreeNode<int> *temp = new TreeNode<int>(inorder[0]);
    TreeNode<int> *curr = temp;
    for(int i=1; i<inorder.size(); i++)
    {
        TreeNode<int> *newnode = new TreeNode<int>(inorder[i]);
        temp->right = newnode;
        temp->left = NULL;
        temp = temp->right;
    }
    temp->right =NULL;
    temp->left = NULL;
    return curr;

}

// Normal BST to Balanced BST
void inorderTraversal(TreeNode<int>* root, vector<int> &inorder)
{
    if(!root)
        return;
    
   inorderTraversal(root->left, inorder);
   inorder.push_back(root->data);
   inorderTraversal(root->right, inorder);
}

TreeNode<int>* makeBST(int s, int e, vector<int> inorder)
{
    if(s>e)
        return NULL;
    
    int mid = (s+e)/2;
    TreeNode<int>* root = new TreeNode<int>(inorder[mid]);
    root->left = makeBST(s, mid-1, inorder);
    root->right = makeBST(mid+1, e, inorder);
    return root;
}

TreeNode<int>* balancedBst(TreeNode<int>* root) {
    vector<int> inorder;
    inorderTraversal(root, inorder);

    return makeBST(0, inorder.size()-1, inorder);
}

// BST from preorder
TreeNode* solve(vector<int>& preorder, int min, int max, int &i)
{
    if(i >= preorder.size())
        return NULL;
    if(preorder[i] < min || preorder[i] > max)
        return NULL;
    
    TreeNode* root = new TreeNode(preorder[i++]);
    root->left = solve(preorder, min, root->val, i);
    root->right = solve(preorder, root->val, max, i);
    return root;
}
TreeNode* bstFromPreorder(vector<int>& preorder) {
    int min = INT_MIN;
    int max = INT_MAX;
    int i =0;
    TreeNode* root = solve(preorder, min, max, i);
    return root;
}
